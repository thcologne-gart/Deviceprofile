within mtpPackage;

model Heizkreis_TypAAAA "Modell fÃ¼r Heizkreis Typ A-Drosselschaltung"
  package Medium = AixLib.Media.Water "Medium 1 in the component";
  package Medium1 = AixLib.Media.Water "Medium 1 in the component";
  package Medium2 = AixLib.Media.Water "Medium 1 in the component";
  // Assumptions
  parameter Boolean allowFlowReversal = true "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)" annotation(
    Dialog(tab = "Assumptions"),
    Evaluate = true);
  parameter Boolean allowFlowReversal1 = true "= false to simplify equations, assuming, but not enforcing, no flow reversal for medium 1" annotation(
    Dialog(tab = "Assumptions"),
    Evaluate = true);
  parameter Boolean allowFlowReversal2 = true "= false to simplify equations, assuming, but not enforcing, no flow reversal for medium 2" annotation(
    Dialog(tab = "Assumptions"),
    Evaluate = true);
  // General Parameters
  parameter String pipeModel = "SimplePipe" annotation(
    choices(choice = "SimplePipe", choice = "PlugFlowPipe"),
    Dialog(group = "Parameters"));
  parameter Modelica.Units.SI.Length length "Pipe length of all pipes (can be overwritten in each pipe)" annotation(
    Dialog(group = "Pipes"));
  parameter AixLib.DataBase.Pipes.PipeBaseDataDefinition parameterPipe = AixLib.DataBase.Pipes.Copper.Copper_6x1() "Pipe type and diameter (can be overwritten in each pipe)" annotation(
    choicesAllMatching = true,
    Dialog(group = "Pipes"));
  parameter AixLib.DataBase.Pipes.InsulationBaseDataDefinition parameterIso = AixLib.DataBase.Pipes.Insulation.Iso50pc() "Insulation Type (can be overwritten in each pipe)" annotation(
    choicesAllMatching = true,
    Dialog(group = "Pipes"));
  parameter Real Kv "Kv value of valve (can be overwritten in the valve)" annotation(
    Dialog(group = "Actuators"));
  parameter Modelica.Units.SI.MassFlowRate m_flow_nominal(min = 0) "Nominal mass flow rate" annotation(
    Dialog(group = "Nominal condition"));
  // Initialization
  parameter Modelica.Units.SI.Temperature T_start = 303.15 "Initialization temperature" annotation(
    Dialog(tab = "Initialization"));
  // Advanced
  parameter Modelica.Units.SI.Time tau = 15 "Time Constant for PT1 behavior of temperature sensors" annotation(
    Dialog(tab = "Advanced"));
  parameter Modelica.Units.SI.Temperature T_amb = 298.15 "Ambient temperature for heat loss" annotation(
    Dialog(tab = "Advanced"));
  parameter Modelica.Units.SI.Time tauHeaTra = parameterPipe.d_i*parameterPipe.d_i/4*1000*4180*(log(parameterPipe.d_i/parameterPipe.d_o)/2/parameterPipe.lambda + log(parameterPipe.d_o/parameterPipe.d_o*(1 + parameterIso.factor))/2/parameterIso.lambda + 1/hCon/parameterPipe.d_o*(1 + parameterIso.factor)) "Time constant for heat transfer of temperature sensors to ambient" annotation(
    Dialog(tab = "Advanced"));
  parameter Modelica.Units.SI.CoefficientOfHeatTransfer hCon = 4 "Convection heat transfer coeffient for all pipes" annotation(
    Dialog(tab = "Advanced"));
  // Dynamics
  parameter Modelica.Fluid.Types.Dynamics energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial "Type of energy balance: dynamic (3 initialization options) or steady state" annotation(
    Evaluate = true,
    Dialog(tab = "Dynamics", group = "Equations"));
  parameter Modelica.Fluid.Types.Dynamics massDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial "Type of mass balance: dynamic (3 initialization options) or steady state" annotation(
    Evaluate = true,
    Dialog(tab = "Dynamics", group = "Equations"));
  //-----parameters-----
  parameter Modelica.Units.SI.Volume vol = 0.0005 "Mixing Volume" annotation(
    Dialog(tab = "Advanced"));
  //----pipe 1-----
  //-----pump-----
  AixLib.Fluid.Movers.SpeedControlled_y pump(redeclare package Medium = Medium, 
    redeclare AixLib.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to4 per(
        speeds_rpm=1800*{0,0.5,1}, constantSpeed_rpm=1800),
    use_inputFilter=false,
    inputType=AixLib.Fluid.Types.InputType.Constant,
    energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState) annotation(
    Placement(visible = true, transformation(origin = {0, 80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  //----pipe 2-----
  //-----pipe 3-----
  //-----pipe 4-----
  //-----valve-----
  //-----pipe 5-----
  //connetions
  AixLib.Fluid.Sources.Boundary_pT boundaryIn(redeclare package Medium = Medium, nPorts = 1, p = 100000) annotation(
    Placement(visible = true, transformation(origin = {-150, 80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  AixLib.Fluid.Sources.Boundary_pT boundaryOut(redeclare package Medium = Medium,nPorts = 1) annotation(
    Placement(visible = true, transformation(origin = {-150, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Constant RPM(k = 0.5) annotation(
    Placement(visible = true, transformation(origin = {60, 80}, extent = {{-100, 40}, {-80, 60}}, rotation = 0)));
equation
  connect(RPM.y, pump.y) annotation(
    Line(points = {{-18, 130}, {0, 130}, {0, 92}}, color = {0, 0, 127}));
  connect(pump.port_a, boundaryIn.ports[1]) annotation(
    Line(points = {{-10, 80}, {-140, 80}}, color = {0, 127, 255}));
  connect(pump.port_b, boundaryOut.ports[1]) annotation(
    Line(points = {{10, 80}, {48, 80}, {48, -80}, {-140, -80}}, color = {0, 127, 255}));
  annotation(
    Icon(graphics = {Ellipse(origin = {0, 61}, lineColor = {151, 151, 151}, fillColor = {240, 240, 240}, fillPattern = FillPattern.Solid, lineThickness = 0.5, extent = {{-10, 10}, {10, -10}}), Line(origin = {4.72927, 60.644}, points = {{-4.64645, 10}, {5.35355, 0}, {-4.64645, -10}, {-4.64645, -10}}, color = {154, 154, 154}, thickness = 0.5), Polygon(origin = {-6, -60}, lineColor = {154, 154, 154}, fillColor = {240, 240, 240}, fillPattern = FillPattern.Solid, lineThickness = 0.5, points = {{-5, 5}, {5, 0}, {-5, -5}, {-5, 5}, {-5, 5}}), Polygon(origin = {4, -60}, rotation = 180, lineColor = {154, 154, 154}, fillColor = {240, 240, 240}, fillPattern = FillPattern.Solid, lineThickness = 0.5, points = {{-5, 5}, {5, 0}, {-5, -5}, {-5, 5}, {-5, 5}}), Line(origin = {-0.549451, -63.0055}, points = {{0, 3.5}, {0, -1.5}}, color = {154, 154, 154}, thickness = 0.5), Rectangle(origin = {-1, -68}, lineColor = {154, 154, 154}, fillColor = {240, 240, 240}, fillPattern = FillPattern.Solid, lineThickness = 0.5, extent = {{-3, 3}, {3, -3}})}));
end Heizkreis_TypAAAA;
